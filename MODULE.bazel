"""
The project's root module.
This declares what dependencies the entire project relies upon, and binds them to their version.
"""

module(
    name = "bite-sized-bazel",
    version = "1.0",
)

# Dependencies

## Rules used to compile Java code and produce executables/JARs
bazel_dep(
    name = "rules_java",
    version = "8.12.0",
)

## Rules to download dependencies from Maven Central
bazel_dep(
    name = "rules_jvm_external",
    version = "6.8",
)

## Aliases local uses of `maven` to the rules defined by `rules_jvm_external`
maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")

# Defines the dependencies and source repositories we'd like to install from
maven.install(
    # The artifacts we've installed from Maven central
    artifacts = [
        "com.google.code.gson:gson:2.13.2",  # JSON Encoding
        "junit:junit:4.13.2",  # Java Testing
    ],
    # Installs the source JAR alongside the artifact JAR
    fetch_sources = True,
    # Makes rules_jvm_external aware of other Bazel modules locally, or in the source code of dependencies
    known_contributing_modules = [
        "bite-sized-bazel",
        "protobuf",
    ],
    # The file where rules_jvm_external stores how transitive dependencies were resolved
    lock_file = "//:maven_install.json",
    # The list of Maven repositories and mirrors we'll download dependencies from
    # This will be inspected and attempted in a top-down order
    repositories = [
        "https://repo1.maven.org/maven2",
        "https://maven-central.storage-download.googleapis.com/maven2/",
    ],
)

# Make Bazel aware of the artifacts and targets from Maven
use_repo(maven, "maven")

## Rules to run Python code as a binary
bazel_dep(
    name = "rules_python",
    version = "1.6.1",
)

# Alias local uses of `pip` to the rules defined by `rules_jvm_external`
pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")

# Parse the requirements lockfile generated by the top-level BUILD file
pip.parse(
    download_only = True,
    hub_name = "pypi",
    python_version = "3.11",
    requirements_lock = "//:requirements_lock.txt",
)

# Make Bazel aware of the artifacts and targets from PIP
use_repo(pip, "pypi")
